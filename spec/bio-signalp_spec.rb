require 'spec_helper'
require 'open3'

SIGNALP3_PATH = File.join(ENV['HOME'],'bioinfo','signalp-3.0','signalp')
SIGNALP4_PATH = File.join(ENV['HOME'],'bioinfo','signalp-4.0','signalp')
SIGNALP_BINARIES = [
  SIGNALP3_PATH,
  SIGNALP4_PATH,
]

describe 'bio-signalp library' do
  def setup
    log_name = 'bio-signalp'
    Bio::Log::CLI.logger('stderr')
    #Bio::Log::CLI.configure(log_name) # when commented out no debug is printed out
  end

  it "positive control" do
  # Known to have a signal peptide
    acp_sequence = 'MKILLLCIIFLYYVNAFKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ'

    Bio::SignalP::Wrapper.new.calculate(acp_sequence).signal?.should == true
  end

  it "negative control" do
  # Known to have a signal peptide
    non_signal_sequence = 'KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK'

    Bio::SignalP::Wrapper.new.calculate(non_signal_sequence).signal?.should == false
  end

  it 'work with different SignalP versions, this test is specific to Ben\'s machines probably' do
    binaries = {
      SIGNALP_BINARIES[0] => Bio::SignalP::Version3::Result,
      SIGNALP_BINARIES[1] => Bio::SignalP::Version4::Result,
    }
    binaries.each do |binary, clazz|
      acp_sequence = 'MKILLLCIIFLYYVNAFKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ'
      positive_result = Bio::SignalP::Wrapper.new.calculate(acp_sequence, :binary_path => binary)
      positive_result.signal?.should == true
      positive_result.should be_kind_of(clazz)
      positive_result.cleavage_site.should == 17
      positive_result.cleave(acp_sequence).should == 'FKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ'
      non_signal_sequence = 'KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK'
      Bio::SignalP::Wrapper.new.calculate(non_signal_sequence, :binary_path => binary).signal?.should == false
    end
  end

  it 'give different predictions for v3 and v4' do
    different = <<EOF
MMKGMVEAAVKWMKAGLPLRILKLVLYAKVIDGDLQGHSLRRFSEVLKTFTELKERYEMQ
LLLPKAVPLEFDVYLSFSEEDKEVAKVIREKLSGAKDGVRIYDSSHQGINKDTVFQEDMY
SIMMKSARVVTVLSPNYLRNKACIEQYNIALCCNRRALRDMLAPIYVDSVEMMPTYMGLV
QYVDCRPHDPSKIGEACSQLTVSLSVTFHTELRVAEFDPLRYDVFLSYSHRDTEKANRFV
EMLQKLAPDLKLFFDVQELKTGKSWQRTLYHSIDGSRCMLALISEPYLKSAVCQEEFALA
QAKHCAKGKQHLQLISICLDDLDTIQPEFTHIPMVKGTPDVFDDMVKTVCPAVIQWLNGE
RVDQTETIKTLFDDQNITTLSADAEMEKFRQSHFQKEFGTQDSLISSKSPFPPKLSDILP
EPGKEVKDKRPKSASDCDLIFSYHSDDEKYVSFIVKILQLNAPSLKVKAVCSDENKLSAF
ERAHCIVPVLSPNYLESPECVEEFHIAIWRQRISNPEAGALLPICVHTLPQKPTYFHLVQ
SAVSMTDGIWAQLSGQHNFGLPQKIVDFSLAAGKTPLSQVDMLALYMAAYYILKRFAKAR
SCKEVEFSMKPALFNIMKLQEQIKQLTQPDYTDQLCKTLLEIHFNDIPDSWREGGHYLRP
KEPEDTTPAIMAPVEGASDSQTHNALNERTQDSSGKDKSEVQGEKAQRSASEGVSHDTVQ
QMDQDHDLKAAQGQDTAEGQDAAEGQDSEGGQDSEGGWDSDGGRDSVGNKTDAEKITGNH
GDEGGDGQVGGSEESKEKTEDEDEDISKRNRAPRSVACVCL
EOF
    Bio::SignalP::Wrapper.new.calculate(different, :binary_path => SIGNALP3_PATH).signal?.should == true
    Bio::SignalP::Wrapper.new.calculate(different, :binary_path => SIGNALP4_PATH).signal?.should == false
  end

  it 'work when given a very large sequence for signalp 3' do
    big_seq = 'MTPEMPNPLDPSLAFNMAPGDVQLATGPQQPAAVFASPLQDAMVKPTQAQIPLHHENDKGNQELGPDRDQVYHIRTTSFKSLGCWKDTWDRAIPLMERKHPLLYEDDYKSRTNALMKCAEAALDNNFSIFSVQNGGQCFSGKDADRTYMKYGVSRTCKACQTAIDLVFLIDGSASVERYGIGNFRRLIDFVRDVVIGFRVSRGNTRVGAIVFGTKPYVLFGFNKYTNNGALFNKLNQGVQYPKSGSRIGRALLMAQNRLFRKNSRRSRTTKVVVVITDGSSMDDVAGPSNALKALGVRIYCVGVGRYINGRQLDILASPPRKNHIFTADWKHLSVIVNDLRNAVCLGTGGNLVAATHRVCLCPYTHPTEKPSTKPPLRPGFPRVVALYPLSKRTKGKDISGNRNPNGELSGVYPAPGPDGLPDGSYYFSGRKTSYIQFPNDGKLDSYYSLTMLAWIYPEGSGPIFHFFPGGVRFWVVRPNTLIITFVRRTGRPAQQLISHKLIPKRWNYVGASYDERTGIATLWRDSRPIESVYIGRIRLATNRPVRMGALPRDLRYFRGRISCMQVYSVPLSGPEIKRAEKVCFRTVRMGAKIGDRRCFRGWITCMQVYDQPLPLRLIRIAKRLCFKAYPTPSPSTTPTILRPGKLCRARIDLGLLVDGTNNRYRFKKILNVVNQLIRYFDISRVYTRIGVIAYSSSSIPYFNFKRFARKYDVLGAVRKISFPQGVSYTGRALRFAGRYLFPGTRRTYARSKVLVVFTGAQSKDSVARPAQMLKRSGVEIFAVGTGSWSSRSYLESIAYDRYHVFNTDSRLGLKTVLDRLVAKICVATPIGKPTTATRPTTTKSTTPTQRIVPPPAMAIYPLNGIDRGKDIGPFKNPTAKLENVVSKSGPDGLPAGSYQLQGFANSYISFPNTGRLDTQNSITIICWLFPESAGPVFHYKPQGVGVNLRMISRKVIRAEFVSRDGRITKRISKRIRSRVWNYIAGTYDYNTGLATIWLDAIPITQRNIGRMRLATNYPAVSGRKSGDPRHFRGRIACVQIYNVALNSYQIRKLKRLCFRARPPYTPTPTRPSLPRIVAIYPLDEQNKGRDISQNRNPTGQLLGVRPAPGPDGWPNTATEFFGNENSYIEFPNSGKLDTINSITVLAWVFHSGVSGPIFNFNVGPGRGVQFWMMGPRKLYARFVRRDGLLTTPLVTHGATVPYKAWAYLGTTYDGNTGVASLYVNNRPVVRTNIGRIRLATNKPVRMGAKKGDRRYFRGRVSCVQVYSLALNRRQISRAAKRCFKIVCKPVVDLGFLIDGSGSIEYHGRGNFKLMLNFIKSMVASLPISRTQSRIGAVLFSDKPIPLFRFGQLNSVTHVIQAIDSIRYPRGGTYIGRALSFIRRYLFSGRRKSNRKRILILLTDGLSKDGVRREASLLKKRDVEVFAVGIVPLPSSLAVYALDGYRRGKDISGSNNPTASLIGTGTAPGPDGRRDGSIKFYGRRNSYVRITNSGRLDAQFSITIIVWMFHDGVNGPFVHYNPQGLGVELAMTGRREIVARFVKRSSSYSVPLKSRQIKYRAWNYVATTFEQRTGLAKLYINSRQVAYKTVGRMRLATNYPLRLGAREDDRRYFRGRLFCLQIYSMPLTGRQIEAAKRRCFLPTPTPTKPTPTRVPPPPPPRVCRARIDLGFLVDASSSRLNSGAIRQFIKETVRRFEVSSTLVRIGVVTYSYSPKLLVGFGRSYSRPQIYRLVDRMQVKGYGGRYLGKALDYTRRYLFSATPRCGRRRVLMVLTTGESRDAVRPYALKMFGSGVEVYAIGIGRVRRKSLFQIATRYRLAFRVNAGRLIYLTRKIKDRICSYPGKAVAVYPFNSASYGRDVSKFKNPTAQLVGLSFIKGPDGHQQGAYFFPGKGRRGVRSSYALIPNNGCLDTRYSITITCWVYPEAPGPILHFNPNGWGLHLWLTRTDELFFRVIPRQGSRQKAKPVISRSVKPFKWNYISGTYDHLTGLATLWVDGVPCAQRNVGKFPLGLATNYPAVVGRRPGDNRVFRGRITCLQVYNVALTRPQIIARKEKCFRRVPLPRTLAVYPLDLRRRGQDISRRRNPSARIGDIKYGRGPDGRQTGSTVFSGRRGSYVEIPNRGNLDARYSITILIWLFHLGTSGPIVHFNPNGYGVHMWMTSQRELFVRFVRRGGAMTTPIRSKRLTYKAWNYVGASYDDRSGIGTLWINSRSVARRNLGKIRLSTNYPIRLGATKRSRTYFRGKLFCFQIYSVPLTQKQVFEAKKRCFLPGPTPTKPTPTRKPTPPPRMILTRGAVATYTFSRASRGRDISQYKNPTARLVGISYTRGPDRNPQGAYYFPGVKRIRGRTITSYVLLPNNGCLDTRFSFTVLFWLFGESPGTLVHFNPNGAGVEVRLSRLTQLYFHVVPRGRSGRSVRPLIGNGVRPRTWNYIAATYDIRTGLATFYVNDFPVAQRNVGKFRSGVATNYPILIGKSPGNRRVFRGRLACLQIFNVALSRSKIVSLKKRCFQTRRTTRGRKRTLLVITDGVSSDRVKQPSLSLKRNGVQIFALGVGSGFRRSQLQLIATSPADVFTAGFGRLGTLVKAIKEKICLPSIPTPTRPPRAVALYPLNSRTQGRDIGPRKNKPARLTGVRLAPGPDGFPRGSIYFSGWRGSFAYFPNNGGIDTRNAITILVWIKPEKDGPIFHYNTQGSGVSVRIVRKKVLYVKFVRRSGKGSYVLKTVGLRPRVWNYFGVTYDGRTGLATIWRESTPLAQGNIGRGLRLATNYPAIMGSRPGSNTYFRGSIACLQVFDLALNGLRIRKRRNVCFRGAPPPVPSPPGTKDITNNNQPGIPSNVRPAPGPDGRKKGSTLFTGSINSYIEFPNNGKLDTRRSTTILAWVFHSGKSGPIFNYDRRGFGVHLWMVGPRVLFVRFVRRSKRRTASVATYAKKPNYRAWNYIGASYDYSSGVATLWLNSEPVARQSIGRFDLATDYPVRMGARVGDKNAFRGKISCLQVYSVALTAKQIRGARKRCFKKVIEPTHTMCGTPVDLGFLIDGSGSIEYQGKGNFVRILNFVKSIISFFEVSRGKSRVGCVLFSSRTIPIFGFRRYSSKAKILKAIGRIRFPRGGTKIGKALDFTRDYLFKGRSTRGKKRILTLITDGISMDKVGPAASRLKAAGVEVFTIGLGRKFKLSQLYQVATDPYHVLTASFSSMMTLIMKLKNQICQRGGPPITTPPPTTRPSRLPRIPTTSPSGKPTTRAVVTYAFRTKPIISFARSYTLSRVYSALRGMQVLGGRRRLGSALYSVKQNLFAAKPLCGQRRVLIVVNGGESVDRVRKPAQTLEGAGVEIFVVGVDGVGRRTASQLVTDRAHLFMVRFARLNTIIKTLKDRICYSPAIVRRGAVAVYPFTLTSKNRDISGYVNPPATFVGRLKYSFGPNKHPQGALYFSGERNTYVLIPNNGCLDTRFSITIAFWVYPLQPGSLVHFNPDGSGMDVSIVMPFKVSVRLISRSGKSVISLEKRIPKDKWTYLTVTSDHKTRLATLWFDSIPFDQRRIDGFRYGFATNYPISIGGTRRGTRRFKGKISCLQIYNYALTKAQIYSKMTRCFSSGVYSELPFLLVDDATHHFRNPLGCLLCALFSSIFGVEVFIARSYFSIYTERLPSTLAVYPLDRKRKGKDISSSRNPSADLNSVGYNEGPDGRRFGSVEFSGQSNSYAIIPNNGNLDARYSITVLVHVFYQGGSGSFFNYNPKEKGLLLRMISATKLEVEIIDRKRRTSIKVQTPGRVFQREAWNYVGMTYSERRQLVSIWVNLKLVATKRVGKVELDTGHPIRLSGYKNSRGYFRGRLFCLQLYSVALTGEKIKEAMKKCFLKGPITIPTSPSLPTPAPRVCTARIDLGFVLETSSTAMRNGNRYYTRFLRKIVQVFTITKDTTRVGIVTYATRTYGNIAFTGSYTRRLVYSAISRIRQLGRGRRLGKALTYARTYLFKGKPQCGRRRILIVLTAGGSTDKVRQARQGLQKAGVEIFVVGVGGVSRRTLMQVATDRQHIFKIQFAQLHTIVNTLKDIMCYSPVRTPSPPIPSTPPVKLPRTLAVYPFDKKRGRTDISRGKNPPAVFGKVVAYGEGPDSRKDGSFQFSGRKDSYIVIPNDGRLDAKYSITVLIWAFPVSRSGVILTYNPAGKGFQLRIIYPQRLQVILVERTRRTTITINTPRPVIQYKAWNYIGVTYSESAQKITIYVDSKAVATKTIGKVQLNTRYPIRLGGRGGVILRRGAIAVYQFTGVSRNRDISGYLNPPAMFYGVSYLTGPDKNPRGALYFKGKRGSYVSIPNNGCLDTKYSITIIFWVYPRSLGPLIHFNPNGRGVDLSIENPFTLYARFVPRSGKFVRPVRKTIPQRQWSYIAASYDSTTGLASLFRNGFLVAQTRIGRFRFGLATNYPILIGRRPRDRRYFNGEISCLQIYNYALDGVQIRSKMTSCFTPESLPSTLAVYPLDEERQGRDISKEKNPTATLVRVSFGEGPFGRETGSTQFDKRSSYVKISNNGKLDAKYSITVLIWVYMERWGNILKYGPTGKGFEVSIISQRKLQVEIVERTRRTRFTIITPRPVIEPKVWRYIGVTYSERAERMIIWVNSKAVAFKIIRKVQLDTKYQIRLGGQDGKGQYFRGRLFCLQIYSVALLEKQIRYAGKNVSLKVHPLHVRLQPHDQRDLHQIDLGFLIDATTTVLRSRSQNYQQVVKFLREILKYFKVSRTATRIGIVTYASRIRTVMSFSRSYRRREVYNAILGIRELGGRRQLGKALTYARTNLFRGRPQCGRRRILMVLTAGGSVDQVQGSSLSLLASGVEIFMIGVGRVSRQTLLQVTTDRRHVFVIGFTQLYTIAKTLKDNSCYNPVIRRRGAVAVYQFTGTSGNRDVSRYVNPPARFEGVYFYRGPDNDARGSLSFRGTRNSFVLIPNNGCLDTRYSITILFWVYPVSIGPLVHFNPNGLGVHVWIIKPFTIYCRVMPRSGKSVKPLYYKIKPRQWSYIGLTYNHKTGVATLWVFSIPVVQHVIGRFRLGLATNYPIYIGQKPNDKRRFRGRISCLQIYNYAMDGVEMRSKMTRCYKPDKIPKALAVYPLDDKRDGSDISSNQNSPAKLYNIKYAEGPDMRKKGSSQFDGQSRTYVFIPNTGKLDTKYSITVLVWMYPEGRRGFVFKYSSNKFVVRVIRPRVLQVEIRGRLRRTTITVNTPGNVIRYKAWNYIGVTCDRRSNVVTIWVNSKPVAKTGLRKVQLDTRKDITLGGGNFRGRLFCLQVYSVPLSQRQIEGARKKCFLKEPNITLPPPITTPTPAPSVCTARIDLGFIVEATSSAMRSQSRQIKQFLRETVRRFTISTTAARIGLITYASRAVGLLRFTGAYTRRLVNNAINRIRELSGQRRLGRALYYAKRYLFVGNPQCGRRRILIILTAGRSIDRVLQPAQSLKGAGVEIFSVDVGRVGSHTLFKVATDRHHVFRVAFAKLFTILRPLKERICYSPVVIRHGAVAIYPLTSASKNRDTSPYKNPPATFFNVEFSYGPDNHQKGALSFKGRRNSYVFIPNNGCLDTRYSMTIILWIYPVGLGPVIHFNPKGRGVDIDIGSGFRLYARFRSRSGNFVKVLYKKIKPRQWNYVAASYDYRLGIATLWRDSRPSVQRRIGRFGLATKYSIVIGQKTGYTRYFQGKITCLQIYNFAMTGEQIRSKKKWCFRQVPLVPTTPVFPKVPTGKVPGVLALYPLDYKRGGSDISSNQNSPAKLYNIKYAEGPDMRKKGSSQFDGQSRTTHNHPTYPADANPCTEICSVPVDLGFLIDATTTVMRSGSRYYRQFLREIVKRLIVSRSRTRVAVYTFASRTSRNIGFAGSYSRGQVYSAVNGIRQLSGARYLGKALRDTKTYMFRGKPQCGRRRILIVLTGGGSVDRARGPALSLLGSGVEIFVIGVGRISSQSLIHVTTDRQHVFVVGYSRLYSIVQTLMDKICCQSVIRRRRAVAVYQFTGASNNRDVSGSVNPPAIFVGVYYSVGPDKRPRGALSFRGTSKSVRPVSKTIPSNRWSYIAASYDYSSGLASLWSYNTLVDQRRIGRFRLGLATNYPIYIGRKPGDRRRFRGEISCLQIYNFAMTGPQIRSKMARCYNPATGPTTRPITLPYTPTVPMPPSLAVYPLDKKRGGIDITGRNPSARFKGTVFGDGPDGRKQGSTKLSGRSNSYVLIPNTGKLDPRYSITVLIWVYPIRSRGIVLTYNPNRKGFQLRIISPRKLLLEMVERTRRTTIRVSTPRPVIERKIWNYIGVTYSMKSKRVTFWVNSKAIATKVIGKVELDTRGSIRLGGYRGSRDFFKGRLSCLQVYSVELTSRQIEEAKKRCFLKVPITVPIPSPSPTRPPRVCTARVDLGFLIDATSASLRSNNRNYMEQFMQQLLRRFVISGRSTRVGLLTFSARTHRLLGFAGSYTTKGLGPLVHFNPFGSGVQISLVSPFRLSARFVPRSGKWVNAVYANITPRRWYYVATTFDHTNGVVSIFVNNALLSQRRIGPFRFGLATNKPVVIGGKPGSRRSFRGKISCLQVYNYPMNLLQIRSKEKLCFRAVLTPSPTITTPYTGSKPPIPSPSSKQPPAYPAFPFNRYNSKASVVRAVDRVRFPYGGTRTGNALRFTSGYLFPRGRIRGRKPFLVIITDGKSQDGVAAPAASLKRKGVDIFALGYGTKFRRLDLQQMASSPSYVMTASFGKISAILAAVKKKACQPFVPPTTPATVPACSLSIDVGLVLDSSARVGRWGFRQIKRFARLIARSFTISQKYGRVGVIVYGSYPRVEFGLNRYFNARYVDRTIERLRFIGGLRRTGKALEMALSGLFRGSRKKRVLVFVTNGPAADGIRLPSLRIHQSGIETFAIGIGSRSSHRELSAIATNARHTYMVTFRTLKSIVKSIVRKACKGFPEPVAIYTLHRKGGTVDISPGKNVPGQSSNVRYAPGPYGQSYKSTEFLGNRNSYIRFPNNGKLSVKHSITLLAWVYPMKPGPIFEYLRGVKFWCFRSDSLYVHFARRDRRRTRVLRKRRLRPYRWNYVGATYDQRTGIATLWLNSSPILSVNIGKGITLATTKDAYMGTGFRGRISCMQIYSSALTGPQISKLKNLCSKPGPFTPSIPVPRLPPAMAFYPLNVRYNTRDVSSNRNPPGRMGNVRPAFGPDLRPGGSFRFKGRSDSYIEFPNNGRLDTRKSLSIVAWINPAGPVGPIFNYKPDGFDVHMWMIRPRVLLVRFVNRLRRFTAPIETNLIKPKAWNFVTATYDQRSGDARIFIDSREVARKRIGQIRLATKYPAIMGARKGGKRFFQGRITCLQIYDIPLGPRQIREAKKLCLKTTCRANMDLAFLIDNSYYFRQRGQGAFSLLTRYIARILYSLRISRQGTRVSMATYASNARLLFPLSRYSRVSDILSALKRIRPRRGRLHLGRALYYVSSKIFPGRRRCGRKRVLVVFVSRRSQDSVERAARVLKRIGVEVFVVGIGGRVSRKELMKIATNGFHVFMASLRTLSTVLDTIRNKACSVTGSAAARAVFPLNGVTGGRDISINHNKAATLVNVKPAPGPDGLPLGSFLLRGIANSYIYFPNRGCMDTKNSMTIALWVYPESAGPIFHYFPKGRGVHLWMKDINTILVKFVPRSLQTISAVTSRRIKPTAWNFVAATYDYETGLASLWNDATLISQRNIGKIELATNYAAISGKKPRDKRIFRGRIACLQIFDRALTGRQLRAIKRKCFRARPSPTTPPPVLPLLVAVYPLDRINGVRDISPRRCPTGRRSNVGYAPGPDGRKDGATRFFGNAGSYIEIPNNGKLDTMVSTTILLWAYHEGLKGPLVNYRPGPGWGVNVWMMGPRTLLARFVRRDGVFTKAVMVTSRKIRYRAWNYFGATYDYKTGVAKLWVNSRLLVVQSIGRFRLATNYPIRLGARRNGKRFFKGRMFCLQIYSRALSRKEILAARSSCFRRFPTTTPTRKTKTPTTTPSPTRPKGPFRAAAFYPLNYLSRGRDRSLFRNPPGILGYVRSAPGPDKLPGGSYQFYGRPDSYIYLPNRGKLDTRKSISIIAWIRNDGGAGPIFHYMPNGWGVYLWMLSSNTVGVRFTRRQRRASTTMLSSRVITPHKWQYIAATYDYISGDARLYLDGNVIARKRLGRIRLATNYPVRIGAKKRDRRNFRGRISCVMVFDVALNSNQIARRKKRCFRRGPRGPSEKVCEPKIDLVFVVDACSENDRFTKANFRRVKNFLIGLIGDFVVSSKKVRISLVLFAQYPKLVLRFSTKKAFVFRIIRNMKLVCGARYSGAALKYAYRQILQRTTRKPVLVMMTTGGSRDDVRGPTALINRKRVETFAIGVGRRYSFRELQYIATDPRHVYTAAFRNLGSTVKLLKRKICKSDTLYHPA'
    Bio::SignalP::Wrapper.new.calculate(big_seq, :binary_path => SIGNALP3_PATH).signal?.should == false
  end
end

describe 'bio-signalp script' do
  # Known to have a signal peptide
  acp_sequence = 'MKILLLCIIFLYYVNAFKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ'

  it "positive control" do
    command = File.join(File.dirname(__FILE__),'..','bin','signalp.rb')

    Open3.popen3(command) do |stdin, stdout, stderr|
      stdin.puts '>positive'
      stdin.puts acp_sequence
      stdin.close

      @result = stdout.readlines # convert to string?
      @error  = stderr.readlines
    end
    @result.should == [">positive\n", "FKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ\n"]
    @error.should == []
  end

  it "return gracefully when empty sequences are given" do
    command = File.join(File.dirname(__FILE__),'..','bin','signalp.rb')

    Open3.popen3(command) do |stdin, stdout, stderr|
      stdin.puts '>positive'
      stdin.puts acp_sequence
      stdin.puts '>empty'
      stdin.puts '>positive2'
      stdin.puts acp_sequence
      stdin.close

      @result = stdout.readlines # convert to string?
      @error  = stderr.readlines
    end
    @result.should == [">positive\n", "FKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ\n",
    ">positive2\n", "FKNTQKDGVSLQILKKKRSNQVNFLNRKNDYNLIKNKNPSSSLKSTFDDIKKIISKQLSVEEDKIQMNSNFTKDLGADSLDLVELIMALEEKFNVTISDQDALKINTVQDAIDYIEKNNKQ\n"]
    @error.should == ["Unexpected empty sequence detected, ignoring: empty\n"]
  end




  it 'give the right -s output for signalp 3' do
    command = File.join(File.dirname(__FILE__),'..','bin','signalp.rb')

    # This also tests the -b flag
    command = "#{command} -b #{SIGNALP3_PATH} -s"
    Open3.popen3(command) do |stdin, stdout, stderr|
      stdin.puts '>positive'
      stdin.puts acp_sequence
      stdin.close

      @result = stdout.readlines # convert to string?
      @error  = stderr.readlines
    end

    expected = [
    "Name\tNN Prediction\tHMM Prediction\n",
    "positive\tT\tT\n"
    ]
    @result.should == expected
    @error.should == []
  end




  it 'give the right -s output for signalp 4' do
    command = File.join(File.dirname(__FILE__),'..','bin','signalp.rb')

    command = "#{command} -b #{SIGNALP4_PATH} -s"
    Open3.popen3(command) do |stdin, stdout, stderr|
      stdin.puts '>positive'
      stdin.puts acp_sequence
      stdin.close

      @result = stdout.readlines # convert to string?
      @error  = stderr.readlines
    end

    expected = [
    "Name\tPredicted?\n",
    "positive\tT\n"
    ]
    @result.should == expected
    @error.should == []
  end
end
